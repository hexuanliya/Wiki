达内工作回忆录 day-01

立项：我们经过数小时的讨论，最终我们决定做一个针对内部员工的
技术文档收集平台，主要是解决研发团队内部 工作交接流程中 技术文案
文档丢失问题；特此立项 【letC】

技术选型： 
    整体架构： 前后端分离
    前端部分： nginx + html + js + css 
    后端部分 :   nginx + uwsgi + django + mysql 
    
    前后端分离原因：  方便我们产品端进行 安卓或者ios端的扩展
    直接一步到位，完全采用前后端分离； 前端主要负责所有页面
    渲染；后端只负责数据层面的返回【json】; 

    我在项目中的定位&角色：   后端全部功能【当地城市的四点
的太阳，我最熟悉】
    遇到问题： 【负责人电话： 13488873118  张小闹】
	1，http无状态? - jwt-token 
	     1, base64 - ....
	     2, hmac - ... 1, 定长输出  2，不可逆， 3，雪崩       
	     3, token设计思维 -
		header 明确了 算法和token种类
		payload 公有声明 & 私有声明
			公有： exp 过期时间-时间戳
			私有 :  username , uid,....
		sign =HS256 (key, header_bs + b'.' + payload_bs)

		token = header_bs + b'.' + payload_bs + b'.' +sign_bs
	     经过这些细节的挖掘和学习，我独立实现了一套
	     自己的token；jwt-header 考虑删除，减小包大小
	     

	2，csrf - 由于Cookies不使用，取而代之需要前端用大量
		代码操作token 从而达到权限方面的认证；
		攻击者无法模拟我方前端代码，故攻击为

舔  + 维护权益  =  靠谱的工作

回顾：
      RESTful 接口校验问题：
	1，修改个人信息
	2，发表博客
	3，发表留言
	
	在请求进入视图前 校验相关权限
	装饰器 - 参数  -  多了一层【3层】
	中间件 - 校验 - 全局 - 请求过滤

      图片上传
                省略



回顾：
        认爹 - 易于做多级回复的拓展
        

留言系统 扩展 - admin添加审核功能

User模块 -  如何做 同一时间只有一个用户登录

方案：
     1，加个字段 - loginStatus [0/1]  1-已登录  0-未登录
     2，用户A 在浏览器a登录   loginStatus 0 - 1
     3,  用户A 在浏览器b登录    

     1，login_time   Datetime
     2，用户一登录   t1  -> login_time   t1 -> token
     3,   用户二次登录  t2 -> login_time t2 - token


# 用户表添加  login_time  DatetimeField   
	1,   null = True
	2,   default  = '2019-10-10 10:10:10'

   用户执行登录时  
	  1， 用户表 更新 登录时间 为 当前时间
	  2， 生成token时，在token中添加 login_time 
	   [1,2步骤时间相等]

   校验token - 检查token中的login_time 和 用户表中的
	login_time是否相等；如果不等，则证明当前
	token生成后，又签发了新的token(有人登录过);
	此时，返回异常状态码，告知用户“请重新登录”



  ubuntu终端中
  redis-cli
  sudo apt-get install redis
  redis-cli

上午问题还原：
问题： 开发 ‘同一时间只有一个用户可登录’功能时，发现
同一个浏览器中多个标签在多次登陆后，旧标签页面里的需要
校验权限的功能均无法使用；臣等惶恐~最终发现 前端页面在
发送token时，使用的是js变量中的token; 此token在用户进入
页面时就已经进行了取值，导致该token有一定的滞后性，最终
我们建议前端，在每次发送token前，再次获取一下当前的本地
存储中的token;以保证token是最新的！


密码找回：

        1， 短信验证码 - 修改密码

        2， 邮箱里发个确认邮件
		1，修改密码的链接
		      http://127.0.0.1:8000/asdadssadas

		2, 验证码发送至邮箱
			
		3, 直接发送重置密码

pip3 freeze|grep 'celery'


sudo pip3 install celery


nginx + html  



















  





	


	










    


